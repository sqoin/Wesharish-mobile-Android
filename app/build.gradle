apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'
apply plugin: 'com.google.protobuf'

android {
    compileSdkVersion = 28
    buildToolsVersion = '28.0.3'
    ext {
        brdMarketingVersion = 3   // Major version. Usually affected by marketing. Maximum value: 99
        brdProductVersion = 14    // Minor version. Usually affected by product. Maximum value: 99
        brdEngineeringVersion = 4 // Hot fix version. Usually affected by engineering. Maximum value: 9
        brdBuildVersion = 3       // Build version. Increase for each new build. Maximum value: 999

        // The version code must be monotonically increasing. It is used by Android to maintain upgrade/downgrade
        // relationship between builds with a max value of 2 100 000 000.
        generateVersionCode = { marketing, product, engineering, build ->
            (marketing * 1000000) + (product * 10000) + (engineering * 1000) + build;
        }

        brdVersionCode = generateVersionCode(brdMarketingVersion, brdProductVersion, brdEngineeringVersion, brdBuildVersion)
        brdInternalVersionName = "$brdMarketingVersion.$brdProductVersion.$ext.brdEngineeringVersion.$ext.brdBuildVersion"
    }
    defaultConfig {
        testInstrumentationRunner = 'android.support.test.runner.AndroidJUnitRunner'
        applicationId = 'com.breadwallet'
        minSdkVersion 23
        targetSdkVersion 28

        versionCode brdVersionCode
        versionName "$brdMarketingVersion.$brdProductVersion.$brdEngineeringVersion"
        buildConfigField "int", "BUILD_VERSION", "$brdBuildVersion"

        multiDexEnabled true

        // Core Library
        missingDimensionStrategy 'network', 'onMainnet'

    }
    signingConfigs {
        FakeSigningConfig {
            keyAlias 'key0'
            keyPassword 'qwerty'
            storeFile file('../FakeSigningKey')
            storePassword 'qwerty'
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    packagingOptions {
        pickFirst 'protobuf.meta'
        // TODO: Update when WorkManager alpha10 becomes available.
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }
    // Specifies two flavor dimensions.
    flavorDimensions "mode"
    productFlavors {
        brd {
            applicationId = "com.breadwallet"
            dimension "mode"
            resValue "string", "app_name", "BRD"
            buildConfigField "boolean", "BITCOIN_TESTNET", "false"
            signingConfig signingConfigs.FakeSigningConfig // Uncomment to fake sign a mainnet release build for testing.
            missingDimensionStrategy 'network', 'onMainnet'
        }
        brdTestnet {
            applicationId = "com.breadwallet.testnet"
            dimension "mode"
            resValue "string", "app_name", "BRD Testnet"
            buildConfigField "boolean", "BITCOIN_TESTNET", "true"
            signingConfig signingConfigs.FakeSigningConfig
            missingDimensionStrategy 'network', 'onTestnet'
        }
    }
    lintOptions {
        lintConfig file("lint.xml")
        // set to true to turn off analysis progress reporting by lint
        quiet false

        explainIssues true
        // if true, stop the gradle build if errors are found
        abortOnError true
        // if true, only report errors
        ignoreWarnings false

        checkReleaseBuilds false

        disable 'MissingTranslation'
    }
    buildTypes {
        release {
            manifestPlaceholders = [applicationIcon: "@mipmap/ic_launcher"]
            debuggable = false
            minifyEnabled = false
            buildConfigField "boolean", "IS_INTERNAL_BUILD", "false"
        }
        debug {
            applicationIdSuffix '.debug'
            manifestPlaceholders = [applicationIcon: "@mipmap/ic_launcher_grayscale"]
            debuggable = true
            jniDebuggable = true
            minifyEnabled = false
            buildConfigField "boolean", "IS_INTERNAL_BUILD", "true"

        }

    }
    sourceSets {
        main {
            java.srcDirs = ['src/main/java',
                            '${protobuf.generatedFilesBaseDir}/main/javalite']
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "${output.baseName}-${brdInternalVersionName}.apk"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    androidExtensions {
        experimental = true
    }
}

task downloadBundles {
    doLast {
        def bundles = ["brd-web-3", "brd-tokens-prod", "brd-web-3-staging", "brd-tokens-staging"]
        def stagingHost = "api.breadwallet.com"
        def releaseHost = "stage2.breadwallet.com"
        for (String bundleName : bundles) {
            def fileUrl
            def resFolder
            if (bundleName.contains("staging")) {
                fileUrl = "https://${stagingHost}/assets/bundles/${bundleName}/download"
                resFolder = "${projectDir}/src/debug/res/raw/"
            } else {
                fileUrl = "https://${releaseHost}/assets/bundles/${bundleName}/download"
                resFolder = "${projectDir}/src/main/res/raw/"
            }

            def folder = file(resFolder)
            if (!folder.exists()) {
                folder.mkdirs()
            }
            println("Downloading: ${fileUrl} into ${resFolder}")
            new File("${resFolder}${bundleName.replace("-", "_")}.tar").withOutputStream { out ->
                new URL(fileUrl).withInputStream { from -> out << from }
            }
        }
    }
}

protobuf {
    protoc {
        // You still need protoc like in the non-Android case
        artifact = 'com.google.protobuf:protoc:3.0.0'

    }
    plugins {
        javalite {
            // The codegen for lite comes as a separate artifact
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'

        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                // In most cases you don't need the full Java output
                // if you use the lite output.
                remove java
            }
            task.plugins {
                javalite {}
            }
        }
    }
}

clean {
    delete protobuf.generatedFilesBaseDir
}

repositories {
    mavenCentral()
    google()
}

dependencies {
    implementation project(':CoreLibrary')

    implementation 'commons-io:commons-io:2.4'
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.9@aar') {
        transitive = true
    }
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    implementation("android.arch.work:work-runtime-ktx:1.0.1") {
        exclude group: 'com.google.guava', module: 'listenablefuture'
    }
    implementation 'androidx.core:core-ktx:0.3'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:cardview-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:design:28.0.0'
    implementation("com.android.support:exifinterface:28.0.0") {
        force = true
    }
    implementation 'com.android.support:gridlayout-v7:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.android.support:support-v13:28.0.0'
    implementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.android.support.test:runner:1.0.2'
    implementation 'com.android.support.test:rules:1.0.2'
    implementation 'com.google.firebase:firebase-core:16.0.4'
    implementation 'com.google.firebase:firebase-messaging:17.3.4'
    implementation 'com.google.guava:guava:25.1-android'
    implementation 'com.google.protobuf:protobuf-lite:3.0.0'
    implementation 'com.google.zxing:core:3.3.0'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation 'io.sigpipe:jbsdiff:1.0'
    implementation 'junit:junit:4.12'
    implementation 'org.eclipse.jetty:jetty-continuation:9.2.19.v20160908' //do not update
    implementation 'org.eclipse.jetty:jetty-webapp:9.2.19.v20160908' //do not update
    implementation 'org.eclipse.jetty.websocket:websocket-server:9.2.19.v20160908' //do not update
    implementation 'org.slf4j:slf4j-api:1.7.22'
    implementation 'tools.fastlane:screengrab:1.1.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    androidTestImplementation "org.mockito:mockito-android:2.25.0"
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:3.10.0"
    androidTestImplementation "android.arch.work:work-testing:1.0.1"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
}

apply plugin: 'com.google.gms.google-services'
